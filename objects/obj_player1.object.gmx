<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
x = room_height / 2;
y = x;
hp = 10;
angle = 0;

global.money = 0;

sprinting = 1;
shooting = true;
lob = false;
lobActivated = false;
rock = true;
bow = false;
pistol = false;
dynamite = false;
machineGun = false;
rifle = false;
shotgun = false;
laser = false;
molotov = false;
iceCube = false;
flameThrower = false;

image_speed = 0;

pistolAmmo = PISTOL_CAPACITY;
pistolCD = 0;
bowAmmo = 1;
rockAmmo = 1;
dynamiteAmmo = 1;
machineAmmo = MACHINE_CAPACITY;
machineCD = 0;
rifleAmmo = RIFLE_CAPACITY;
shotgunAmmo = SHOTGUN_CAPACITY;
shotgunCD = 0;
laserAmmo = LASER_CAPACITY
molotovAmmo = 1;
iceCubeAmmo = 1;
flameAmmo = FLAME_CAPACITY;

reloadCount = 0;
reloading = false;

torch = instance_create(x, y, obj_playerTorch);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.fire = part_system_create();
global.flame = part_type_create();
var flamep = global.flame;
global.smoke = part_type_create();
var smokep = global.smoke

dirc = 100;

part_type_color2(flamep, c_yellow, c_red);
part_type_direction(flamep, dirc - 1, dirc + 1, 0, 0);
part_type_life(flamep, 20, 30); //40 50
part_type_shape(flamep, pt_shape_smoke);
part_type_speed(flamep, 10, 12, 0, .25);
part_type_size(flamep, .15, .2, .014, .003);
part_type_alpha3(flamep, 1, .8, 0);
part_type_blend(flamep, 1); //Can change to 1

part_type_color2(smokep, c_gray, c_black);
part_type_direction(smokep, dirc - 1, dirc + 1, 0, 0);
part_type_life(smokep, 20, 30);
part_type_shape(smokep, pt_shape_smoke);
part_type_speed(smokep, 9, 11, 0, .25);
part_type_size(smokep, .15, .2, .016, .003);
part_type_alpha3(smokep, 1, .8, 0);
part_type_blend(smokep, 0);

global.em = part_emitter_create(global.fire);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveForward = -keyboard_check(ord("W"));
moveBack = keyboard_check(ord("S"));
moveLeft = -keyboard_check(ord("A"));
moveRight = keyboard_check(ord("D"));
moveStraight = (moveForward + moveBack) * WALKING_SPEED;
moveSide = (moveLeft + moveRight) * WALKING_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Angle and death for some reason
angle = point_direction(x, y, mouse_x, mouse_y);

if(hp &lt;= 0) {
    room_goto(rm_deathScreen);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change weapons
if(keyboard_check_pressed(ord('1')) &amp;&amp; !bow) {
    setFalse();
    bow = true;
}
else if(keyboard_check_pressed(ord('2')) &amp;&amp; !rock) {
    setFalse();
    if(rockAmmo == 0) {
        image_index = 3;
    }
    lob = true;
    rock = true;
}
else if(keyboard_check_pressed(ord('3')) &amp;&amp; !pistol) {
    setFalse();
    pistol = true;
}
else if(keyboard_check_pressed(ord('4')) &amp;&amp; !dynamite) {
    setFalse();
    if(dynamiteAmmo = 0) {
        image_index = 3;
    }
    lob = true;
    dynamite = true;
}
else if(keyboard_check_pressed(ord('5')) &amp;&amp; !machineGun) {
    setFalse();
    machineGun = true;
}
else if(keyboard_check_pressed(ord('6')) &amp;&amp; !flameThrower) {
    setFalse();
    flameThrower = true;
}
else if(keyboard_check_pressed(ord('7')) &amp;&amp; !shotgun) {
    setFalse();
    shotgun = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire weapon
//Rock
if(mouse_check_button(mb_left)) {
    shooting = true;
}
else {
    shooting = false;
}
if(rock) {
    if(shooting &amp;&amp; rockAmmo &gt; 0) {
        instance_create(x, y, obj_rock);
        rockAmmo = 0;
        image_index++;
        image_speed = .1;
        shooting = true;
    }
    else if(rockAmmo == 0 &amp;&amp; !reloading &amp;&amp; image_index &gt;= 3) {
        shooting = false;
        reloading = true;
    }
    else if(reloadCount &lt; .6 * room_speed &amp;&amp; reloading) {
        shooting = false;
        reloadCount++;
    }
    else if(reloading) {
        shooting = false;
        reloadCount = 0;
        reloading = false;
        rockAmmo = 1;
        image_speed = 0;
    }
}
//Bow and arrow
else if(bow) {
    if(shooting &amp;&amp; bowAmmo &gt; 0) {
        shooting = true;
        instance_create(x, y, obj_arrow);
        bowAmmo--;
        image_index++;
        image_speed = .4;
    }
    else if(bowAmmo == 0 &amp;&amp; !reloading) {
        shooting = false;
        reloading = true;
    }
    else if(reloadCount &lt; .8 * room_speed &amp;&amp; reloading) {
        shooting = false;
        reloadCount++;
    }
    else if(reloading) {
        shooting = false;
        reloadCount = 0;
        reloading = false;
        bowAmmo = 1;
        image_speed = 0;
    }
    
}
//Pistol
else if(pistol) {
    if(shooting &amp;&amp; pistolAmmo &gt; 0 &amp;&amp; pistolCD == 0) {
        pistolCD = room_speed / 3;
        instance_create(x, y, obj_bullet);
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        part_particles_create(global.system, x, y, global.pistolPart, 5); 
        pistolAmmo--;
        image_index++;
        image_speed = .4;
    }
    else if(((pistolAmmo == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; pistolAmmo != PISTOL_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 1.2 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        reloadCount = 0;
        reloading = false;
        pistolAmmo = PISTOL_CAPACITY;
        image_speed = 0;
    }
    if(pistolCD != 0) {
        pistolCD--;
    }
}
//Dynamite
else if(dynamite) {
    if(shooting &amp;&amp; dynamiteAmmo &gt; 0) {
        instance_create(x, y, obj_dynamite);
        dynamiteAmmo = 0;
        image_index++;
        image_speed = .1;
    }
    else if(dynamiteAmmo == 0 &amp;&amp; !reloading &amp;&amp; image_index &gt;= 3) {
        reloading = true;
    }
    else if(reloadCount &lt; .6 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        reloadCount = 0;
        reloading = false;
        dynamiteAmmo = 1;
        image_speed = 0;
    }
}

//Machine Gun
else if(machineGun) {
    if(shooting &amp;&amp; machineAmmo &gt; 0 &amp;&amp; machineCD == 0) {
        machineCD = room_speed / 10;
        instance_create(x, y, obj_machineBullet);
        distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        part_particles_create(global.system, x + (10 * ((mouse_x - x) / distanceToMouse)), y + (12 * ((mouse_x - y)) / distanceToMouse), global.pistolPart, 5);
        machineAmmo--;
        image_index++;
        image_speed = .6;
    }
    else if(((machineAmmo == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; machineAmmo != PISTOL_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 4.8 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        reloadCount = 0;
        reloading = false;
        machineAmmo = MACHINE_CAPACITY;
        image_speed = 0;
    }
    if(machineCD != 0) {
        machineCD--;
    }
}
//Rifle
else if(rifle) {

}
//Shotgun
else if(shotgun) {
    if(shooting &amp;&amp; shotgunAmmo &gt; 0 &amp;&amp; shotgunCD == 0) {
        shotgunCD = room_speed / 3;
        for(i = 0; i &lt; 10; i++) {
            instance_create(x, y, obj_shotgunShell);
        }
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        part_particles_create(global.system, x, y, global.pistolPart, 10); 
        shotgunAmmo--;
        image_index++;
        image_speed = .4;
    }
    else if(((shotgunAmmo == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; shotgunAmmo != SHOTGUN_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 1 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        reloadCount = 0;
        reloading = false;
        shotgunAmmo = SHOTGUN_CAPACITY;
        image_speed = 0;
    }
    if(shotgunCD != 0) {
        shotgunCD--;
    }
}
//LASER
else if(laser) {

}
//Molotov
else if(molotov) {

}
//Ice cube
else if(iceCube) {

}
//Flamethrower
else if(flameThrower) {
    if(shooting &amp;&amp; flameAmmo &gt; 0) {
        part_type_direction(global.flame, angle - 5, angle + 5, 0, .10);
        part_type_direction(global.smoke, angle - 5, angle + 5, 0, .10);

        part_emitter_region(global.fire, global.em, x, x, y, y, ps_shape_rectangle, ps_distr_linear);
        part_emitter_burst(global.fire, global.em, global.smoke, 3);
        part_emitter_burst(global.fire, global.em, global.flame, 5);

        instance_create(x, y, obj_fire);
        flameAmmo--;
    }
    else if(flameAmmo == 0 || (keyboard_check_pressed(ord('R')) &amp;&amp; flameAmmo != FLAME_CAPACITY)) {
        reloading = true;
    }
    else if(reloadCount &lt; 3 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        reloadCount = 0;
        reloading = false;
        flameAmmo = FLAME_CAPACITY;
        image_speed = 0;
    }
}

if(lob &amp;&amp; !lobActivated) {
    lobActivated = true;
    instance_create(min(mouse_x, 864), mouse_y, obj_lobMarker);
}
else if(!lob &amp;&amp; instance_exists(obj_lobMarker)) {
    with(obj_lobMarker) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player sprite controller
if(bow) {
    if(reloading) {
        sprite_index = spr_playerBowReload;
        image_speed = .1;
    }
    else {
        sprite_index = spr_playerBow;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
else if(rock) {
    if(reloading) {
        sprite_index = spr_playerRockReload;
        image_speed = .2;
    }
    else {
        sprite_index = spr_playerRock;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
else if(pistol) {
    if(reloading) {
        sprite_index = spr_playerPistolReload;
        image_speed = .1;
    }
    else {
        sprite_index = spr_playerPistolShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
else if(dynamite) {
    if(reloading) {
        sprite_index = spr_playerDynamiteReload;
        image_speed = .2;
    }
    else {
        sprite_index = spr_playerDynamite;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
else if(machineGun) {
    if(reloading) {
        sprite_index = spr_playerMachineReload;
        image_speed = .025;
    }
    else {
        sprite_index = spr_playerMachineShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*dirStraight = image_angle - 90;
xFor = moveStraight * dsin(dirStraight) * WALKING_SPEED;
yFor = moveStraight * dcos(dirStraight) * WALKING_SPEED;
if(place_meeting(x + xFor, y, par_wall)) {
    while(!place_meeting(x + sign(xFor), y, par_wall)) {
        x += sign(xFor);
    }
}
else {
    x += xFor;
}
if(place_meeting(x, y + yFor, par_wall)) {
    while(!place_meeting(x, y + sign(yFor), par_wall)) {
        y += sign(yFor);
    }
}
else {
    y += yFor;
}

dirSide = image_angle;
xSide = moveSide * dsin(dirSide) * WALKING_SPEED;
ySide = moveSide * dcos(dirSide) * WALKING_SPEED;
if(place_meeting(x + xSide, y, par_wall)) {
    while(!place_meeting(x + sign(xSide), y, par_wall)) {
        x += sign(xSide);
    }
}
else {
    x += xSide;
}
if(place_meeting(x, y + ySide, par_wall)) {
    while(!place_meeting(x, y + sign(ySide), par_wall)) {
        y += sign(ySide);
    }
}
else {
    y += ySide;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if(keyboard_check(vk_shift) &amp;&amp; !shooting &amp;&amp; !reloading) {
    sprinting = 2;
}
else {
    sprinting = 1;
}
if(place_meeting(x + moveSide, y, par_wall)) {
    while(!place_meeting(x + (sign(moveSide) / 10), y, par_wall)) {
        x += sign(moveSide) / 10;
    }
}
else {
    x += moveSide * sprinting;
}
if(place_meeting(x, y + moveStraight, par_wall)) {
    while(!place_meeting(x, y + sign(moveStraight), par_wall)) {
        y += sign(moveStraight) / 10;
    }
}
else {
    y += moveStraight * sprinting;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_create(x, y, obj_rock);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, angle, -1, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
