<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-102</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable fun
randomize();
x = room_height / 2;
y = x;
hp = 100;
angle = 0;

global.money = 0;

sprinting = 1;
shooting = true;
lob = true;
lobActivated = false;

/*rock = true;
bow = false;
pistol = false;
dynamite = false;
machineGun = false;
rifle = false;
shotgun = false;
laser = false;
molotov = false;
iceCube = false;
flamethrower = false;*/

image_speed = 0;

pistolAmmo = PISTOL_CAPACITY;
pistolCD = 0;
bowAmmo = 1;
rockAmmo = 1;
dynamiteAmmo = 1;
machineAmmo = MACHINE_CAPACITY;
machineCD = 0;
spray = 0;
rifleAmmo = RIFLE_CAPACITY;
rifleCD = 0;
shotgunAmmo = SHOTGUN_CAPACITY;
shotgunCD = 0;
laserAmmo = LASER_CAPACITY
molotovAmmo = 1;
iceAmmo = 1;
flameAmmo = FLAME_CAPACITY;
swordCD = 0
stickCD = 0;
swordAmmo = 1;
stickAmmo = 1;

reloadCount = 0;
reloading = false;

light = instance_create(x, y, obj_playerLight);
instance_create(x, y, obj_torch);

holdingItem = false;
heldItem = undefined;
invalidPlacing = false;

//weaponArr = createArr(rock, bow, pistol, dynamite, machineGun, rifle, shotgun, laser, molotov, iceCube, flamethrower, stick, sword);
weaponArr = createArr(true, false, false, false, false, false, false, false, false, false, false, true, false);
ammoArr = createArr(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0);
currentAmmoArr = createArr(rockAmmo, bowAmmo, pistolAmmo, dynamiteAmmo, machineAmmo, rifleAmmo, shotgunAmmo, laserAmmo, molotovAmmo, iceAmmo, flameAmmo, stickAmmo, swordAmmo);
playerWeapons = createArr(0, 11, 11, 11, 11);
weaponIndex = 0;
switchIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flame particles
global.fire = part_system_create();
global.flame = part_type_create();
var flamep = global.flame;
global.smoke = part_type_create();
var smokep = global.smoke

dirc = 100;

part_type_color2(flamep, c_yellow, c_red);
part_type_direction(flamep, dirc - 1, dirc + 1, 0, 0);
part_type_life(flamep, 20, 30); //40 50
part_type_shape(flamep, pt_shape_smoke);
part_type_speed(flamep, 10, 12, 0, .25);
part_type_size(flamep, .15, .2, .014, .003);
part_type_alpha3(flamep, 1, .8, 0);
part_type_blend(flamep, 1); //Can change to 1

part_type_color2(smokep, c_gray, c_black);
part_type_direction(smokep, dirc - 1, dirc + 1, 0, 0);
part_type_life(smokep, 20, 30);
part_type_shape(smokep, pt_shape_smoke);
part_type_speed(smokep, 9, 11, 0, .25);
part_type_size(smokep, .15, .2, .016, .003);
part_type_alpha3(smokep, 1, .8, 0);
part_type_blend(smokep, 0);

global.em = part_emitter_create(global.fire);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invalidPlacing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get player input
moveForward = -keyboard_check(ord("W"));
moveBack = keyboard_check(ord("S"));
moveLeft = -keyboard_check(ord("A"));
moveRight = keyboard_check(ord("D"));
moveStraight = (moveForward + moveBack) * WALKING_SPEED;
moveSide = (moveLeft + moveRight) * WALKING_SPEED;
keyR = keyboard_check_pressed(ord("R"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Angle and death for some reason
angle = point_direction(x, y, mouse_x, mouse_y);

if(hp &lt;= 0) {
    room_goto(rm_deathScreen);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change weapons
/*if(keyboard_check_pressed(ord('1')) &amp;&amp; !bow) {
    setFalse();
    bow = true;
}
else if(keyboard_check_pressed(ord('2')) &amp;&amp; !rock) {
    setFalse();
    if(rockAmmo == 0) {
        image_index = 3;
    }
    lob = true;
    rock = true;
}
else if(keyboard_check_pressed(ord('3')) &amp;&amp; !pistol) {
    setFalse();
    pistol = true;
}
else if(keyboard_check_pressed(ord('4')) &amp;&amp; !dynamite) {
    setFalse();
    if(dynamiteAmmo = 0) {
        image_index = 3;
    }
    lob = true;
    dynamite = true;
}
else if(keyboard_check_pressed(ord('5')) &amp;&amp; !machineGun) {
    setFalse();
    machineGun = true;
}
else if(keyboard_check_pressed(ord('6')) &amp;&amp; !flamethrower) {
    setFalse();
    flamethrower = true;
}
else if(keyboard_check_pressed(ord('7')) &amp;&amp; !shotgun) {
    setFalse();
    shotgun = true;
}*/
if(keyboard_check_pressed(ord('1')) &amp;&amp; weaponIndex != 0) {
    switchIndex = 0;
}
else if(keyboard_check_pressed(ord('2')) &amp;&amp; weaponIndex != 1) {
    switchIndex = 1;
}
else if(keyboard_check_pressed(ord('3')) &amp;&amp; weaponIndex != 2) {
    switchIndex = 2;
}
else if(keyboard_check_pressed(ord('4')) &amp;&amp; weaponIndex != 3) {
    switchIndex = 3;
}
else if(keyboard_check_pressed(ord('5')) &amp;&amp; weaponIndex != 4) {
    switchIndex = 4;
}
else {
    switchIndex = 100;
}
if(switchIndex != 100) {
    obj_menuItemBar.iconArr[weaponIndex].selected = false;
    weaponArr[playerWeapons[weaponIndex]] = false;
    weaponIndex = switchIndex;
    //setFalse();
    weaponArr[playerWeapons[weaponIndex]] = true;
    obj_menuItemBar.iconArr[weaponIndex].selected = true;
    obj_player1.image_index = 0;
    if(weaponArr[0] || weaponArr[3]) {
        lob = true;
    }
    else {
        lob = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire weapon
//Rock
if(!holdingItem) {

if(mouse_check_button(mb_left) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_menu)) {
    shooting = true;
}
else {
    shooting = false;
}
var ind = playerWeapons[weaponIndex];
if(weaponArr[0]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0) {
        instance_create(x, y, obj_rock);
        currentAmmoArr[ind] = 0;
        image_index++;
        image_speed = .1;
        shooting = true;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; currentAmmoArr[ind] == 0 &amp;&amp; !reloading /*&amp;&amp; image_index &gt;= 3*/) {
        shooting = false;
        reloading = true;
    }
    else if(reloadCount &lt; .6 * room_speed &amp;&amp; reloading) {
        shooting = false;
        reloadCount++;
    }
    else if(reloading) {
        
    }
}
//Bow and arrow
else if(weaponArr[1]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0) {
        shooting = true;
        instance_create(x, y, obj_arrow);
        currentAmmoArr[ind]--;
        image_index++;
        image_speed = .4;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; currentAmmoArr[ind] == 0 &amp;&amp; !reloading) {
        shooting = false;
        reloading = true;
    }
    else if(reloadCount &lt; .8 * room_speed &amp;&amp; reloading) {
        shooting = false;
        reloadCount++;
    }
    else if(reloading) {
        
    }
    
}
//Pistol
else if(weaponArr[2]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0 &amp;&amp; pistolCD == 0) {
        pistolCD = room_speed / 3;
        instance_create(x, y, obj_bullet);
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        part_particles_create(global.system, x, y, global.pistolPart, 5); 
        currentAmmoArr[ind]--;
        image_index++;
        image_speed = .4;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; ((currentAmmoArr[ind] == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; currentAmmoArr[ind] != PISTOL_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 1.2 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        
    }
    if(pistolCD != 0) {
        pistolCD--;
    }
}
//Dynamite
else if(weaponArr[3]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0) {
        instance_create(x, y, obj_dynamite);
        currentAmmoArr[ind] = 0;
        image_index++;
        image_speed = .1;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; currentAmmoArr[ind] == 0 &amp;&amp; !reloading &amp;&amp; image_index &gt;= 3) {
        reloading = true;
    }
    else if(reloadCount &lt; .6 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        
    }
}

//Machine Gun
else if(weaponArr[4]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0 &amp;&amp; machineCD == 0) {
        spray++;
        spray = clamp(spray, 0, 10);
        machineCD = room_speed / 10;
        instance_create(x, y, obj_machineBullet);
        distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        part_particles_create(global.system, x + (10 * ((mouse_x - x) / distanceToMouse)), y + (12 * ((mouse_x - y)) / distanceToMouse), global.pistolPart, 5);
        currentAmmoArr[ind]--;
        image_index++;
        image_speed = .6;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; ((currentAmmoArr[ind] == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; currentAmmoArr[ind] != PISTOL_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 4.8 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        
    }
    else if(machineCD &lt;= 0) {
        spray -= .1;
        spray = clamp(spray, 0, 10);
    }
    if(machineCD != 0) {
        machineCD--;
    }
}
//Rifle
else if(weaponArr[5]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0 &amp;&amp; rifleCD == 0) {
        rifleCD = room_speed / 3;
        instance_create(x, y, obj_rifleBullet);
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        part_particles_create(global.system, x, y, global.pistolPart, 5); 
        currentAmmoArr[ind]--;
        image_index++;
        image_speed = .4;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; ((currentAmmoArr[ind] == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; currentAmmoArr[ind] != RIFLE_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 1.2 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {

    }
    if(rifleCD != 0) {
        rifleCD--;
    }
}
//Shotgun
else if(weaponArr[6]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0 &amp;&amp; shotgunCD == 0) {
        shotgunCD = room_speed / 3;
        for(i = 0; i &lt; 10; i++) {
            instance_create(x, y, obj_shotgunShell);
        }
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        part_particles_create(global.system, x, y, global.pistolPart, 10); 
        currentAmmoArr[ind]--;
        image_index++;
        image_speed = .4;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; ((currentAmmoArr[ind] == 0 /*&amp;&amp; mouse_check_button_pressed(mb_left)*/) || (keyboard_check_pressed(ord('R')) &amp;&amp; currentAmmoArr[ind] != SHOTGUN_CAPACITY)) &amp;&amp; !reloading) {
        reloading = true;
    }
    else if(reloadCount &lt; 1 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
        
    }
    if(shotgunCD != 0) {
        shotgunCD--;
    }
}
//LASER
else if(weaponArr[7]) {

}
//Molotov
else if(weaponArr[8]) {

}
//Ice cube
else if(weaponArr[9]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0) {
        instance_create(x, y, obj_iceCube);
        currentAmmoArr[ind] = 0;
        image_index++;
        image_speed = .1;
        shooting = true;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; currentAmmoArr[ind] == 0 &amp;&amp; !reloading /*&amp;&amp; image_index &gt;= 3*/) {
        shooting = false;
        reloading = true;
    }
    else if(reloadCount &lt; .6 * room_speed &amp;&amp; reloading) {
        shooting = false;
        reloadCount++;
    }
    else if(reloading) {
        
    }
}
//Flamethrower
else if(weaponArr[10]) {
    if(shooting &amp;&amp; currentAmmoArr[ind] &gt; 0) {
        part_type_direction(global.flame, angle - 5, angle + 5, 0, .10);
        part_type_direction(global.smoke, angle - 5, angle + 5, 0, .10);

        part_emitter_region(global.fire, global.em, x, x, y, y, ps_shape_rectangle, ps_distr_linear);
        part_emitter_burst(global.fire, global.em, global.smoke, 3);
        part_emitter_burst(global.fire, global.em, global.flame, 5);

        instance_create(x, y, obj_fire);
        currentAmmoArr[ind]--;
    }
    else if(ammoArr[playerWeapons[weaponIndex]] &gt; 0 &amp;&amp; currentAmmoArr[ind] == 0 || (keyboard_check_pressed(ord('R')) &amp;&amp; currentAmmoArr[ind] != FLAME_CAPACITY)) {
        reloading = true;
    }
    else if(reloadCount &lt; 3 * room_speed &amp;&amp; reloading) {
        reloadCount++;
    }
    else if(reloading) {
    }
}
//Stick
else if(weaponArr[11]) {
    if(shooting &amp;&amp; stickCD == 0) {
        stickCD = room_speed / 2;
        instance_create(x, y, obj_stickSwing);
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        image_index++;
        image_speed = .4;
    }
    if(stickCD != 0) {
        stickCD--;
    }
}
//Stick
else if(weaponArr[12]) {
    if(shooting &amp;&amp; swordCD == 0) {
        swordCD = room_speed / 2;
        instance_create(x, y, obj_swordSwing);
        //distanceToMouse = point_distance(room_height / 2, room_height / 2, mouse_x, mouse_y); 
        //part_particles_create(global.system, x + (7 * ((mouse_x - x) / distanceToMouse)), y + (8 * ((mouse_y - y) / distanceToMouse)), global.pistolPart, 5);
        image_index++;
        image_speed = .4;
    }
    if(swordCD != 0) {
        swordCD--;
    }
}
if(lob &amp;&amp; !lobActivated) {
    lobActivated = true;
    instance_create(min(mouse_x, 864), mouse_y, obj_lobMarker);
}
else if(!lob &amp;&amp; instance_exists(obj_lobMarker)) {
    with(obj_lobMarker) {
        instance_destroy();
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player sprite controller
//rock
var ind = playerWeapons[weaponIndex];
if(weaponArr[0]) {
    if(reloading) {
        sprite_index = spr_playerRockReload;
        image_speed = .2;
        if(image_index &gt; image_number - 1) {
            shooting = false;
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = 1;
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerRock;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//bow
else if(weaponArr[1]) {
    if(reloading) {
        sprite_index = spr_playerBowReload;
        image_speed = .1;
        if(image_index &gt;= image_number - 1) {
            shooting = false;
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(1, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerBow;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//pistol
else if(weaponArr[2]) {
    if(reloading) {
        sprite_index = spr_playerPistolReload;
        image_speed = .1;
        if(image_index &gt; image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(PISTOL_CAPACITY, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerPistolShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//dynamite
else if(weaponArr[3]) {
    if(reloading) {
        sprite_index = spr_playerDynamiteReload;
        image_speed = .2;
        if(image_index &gt; image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(1, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerDynamite;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//machine gun
else if(weaponArr[4]) {
    if(reloading) {
        sprite_index = spr_playerMachineReload;
        image_speed = .025;
        if(image_index &gt; image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(MACHINE_CAPACITY, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_index = 0;
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerMachineShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//rifle
else if(weaponArr[5]) {
    if(reloading) {
        sprite_index = spr_playerMachineReload;
        image_speed = .1;
        if(image_index &gt;= image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(RIFLE_CAPACITY, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_index = 0;
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerMachineShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//shotgun
else if(weaponArr[6]) {
    if(reloading) {
        sprite_index = spr_playerShotgunReload;
        image_speed = .2;
        if(image_index &gt; image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(SHOTGUN_CAPACITY, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerShotgunShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//laser
else if(weaponArr[7]) {

}
//molotov
else if(weaponArr[8]) {

}
//ice cube
else if(weaponArr[9]) {
if(reloading) {
        sprite_index = spr_playerRockReload;
        image_speed = .2;
        if(image_index &gt; image_number - 1) {
            shooting = false;
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(1, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerRock;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
//flamethrower
else if(weaponArr[10]) {
    if(reloading) {
        sprite_index = spr_playerFlamethrowerReload;
        image_speed = .05;
        if(image_index &gt; image_number - 1) {
            reloadCount = 0;
            reloading = false;
            currentAmmoArr[ind] = min(FLAME_CAPACITY, ammoArr[ind]);
            ammoArr[ind] -= currentAmmoArr[ind];
            image_speed = 0;
        }
    }
    else {
        sprite_index = spr_playerFlamethrowerShoot;
        if(image_speed &gt; 0 &amp;&amp; (image_index &gt;= 0 &amp;&amp; image_index &lt; 1)) {
            image_speed = 0;
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if(keyboard_check(vk_shift) &amp;&amp; !shooting &amp;&amp; !reloading) {
    sprinting = 2;
}
else {
    sprinting = 1;
}
if(place_meeting(x + moveSide, y, par_wall)) {
    while(!place_meeting(x + (sign(moveSide) / 10), y, par_wall)) {
        x += sign(moveSide) / 10;
    }
}
else {
    x += moveSide * sprinting;
}
if(place_meeting(x, y + moveStraight, par_wall)) {
    while(!place_meeting(x, y + sign(moveStraight), par_wall)) {
        y += sign(moveStraight) / 10;
    }
}
else {
    y += moveStraight * sprinting;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(holdingItem) {
    heldItem.x = clamp(mouse_x, 0, 864);
    heldItem.y = clamp(mouse_y, 0, 864);
    if(mouse_check_button_pressed(mb_left)) {
        if(mouse_x &lt; 864 &amp;&amp; mouse_y &lt; 864) {
            heldItem.placed = true;
            heldItem = undefined;
            holdingItem = false;
        }
        else {
            invalidPlacing = true;
            alarm[0] = 2 * room_speed;
            //send message saying invalid place to put it or something
        }
    }   
    if(keyR) {
        heldItem.image_angle += 45;
        //rotate item in hand. maybe this won't work with cursors
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text Handler
text = "Round: " + string(global.roundIndex);
text2 = "Money: " + string(global.money);
text3 = "Index: " + string(weaponIndex);
text4 = "Cannot place item there";
var ind = playerWeapons[weaponIndex];
text5 = "Ammo: " + string(currentAmmoArr[ind]) + "/" + string(ammoArr[ind]);
draw_set_font(f_round);
draw_set_color(c_white);
draw_text_transformed(10, 10, text, 1, 1, 0);
draw_text_transformed(10, 30, text2, 1, 1, 0);
draw_text_transformed(10, 50, text3, 1, 1, 0);
draw_text_transformed(10, 70, text5, 1, 1, 0);
if(invalidPlacing) {
    draw_text_transformed(mouse_x, mouse_y, text4, 1, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player image drawer
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, angle, -1, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
